fun main(){
    val squareCabin = SquareCabin(6)
    val roundHut = RoundHut(3)
    val roundTower = RoundTower(4)
    
    with(squareCabin){
    println("\n Square Cabin \n ~~~~~~~~~~~")
    println("Capacity: ${capacity}")
    println("Matreial: ${buildingMaterial}")
    println("Has room?: ${hasRoom()}")  
    }
    
     with(roundHut){
        println("\n Round Hut \n ---------------")
        println("Capacity: ${capacity}")
        println("Material: ${buildingMaterial}")
        println("Has room?: ${hasRoom()}")
    }
    
    with(roundTower){
        println("\n Round Tower \n ===========")
        println("Capacity: ${capacity}")
        println("Material: ${buildingMaterial}")
        println("Has room?: ${hasRoom()}")
    }
}

abstract class Dwelling(private val residents){
    abstract val buildingMaterial: String
    abstract val capacity: Int
    
    fun hasRoom():Boolean{
        return residents < capacity
    }
}


class SquareCabin(residents: Int): Dwelling(residents){
    override val buildingMaterial = "Wood"
    override val capacity = 6
    
}

open class RoundHut(residents: Int): Dwelling(residents) {
    override val buildingMaterial = "Straw"
    override val capacity = 4
}

 class RoundTower(residents:Int, val floors:Int = 2): RoundHut(residents){
    override val buildingMaterial = "Stone"
    override val capacity = 4 * floors
}

